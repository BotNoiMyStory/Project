import 'package:flutter/material.dart';
import 'package:material_design_icons_flutter/material_design_icons_flutter.dart';

class TajData extends StatefulWidget {
  const TajData({Key? key}) : super(key: key);

  @override
  State<TajData> createState() => _TajDataState();
}

class _TajDataState extends State<TajData> {
  final List<Map<String, dynamic>> rules = [
    {
      'title': 'р╕Бр╕Ор╕Вр╕нр╕З р╕Щр╕╣р╕Щр╕кр╕▓р╕Бр╕┤р╕Щ р╣Бр╕ер╕░ р╕Хр╕▒р╕Щр╕зр╕╡р╕Щ (╪з╪н┘Г╪з┘Е ╪з┘Д┘Ж┘И┘Ж ╪з┘Д╪│╪з┘Г┘Ж╪й ┘И╪з┘Д╪к┘Ж┘И┘К┘Ж)',
      'children': [
        {
          'title': 'р╕нр╕┤р╕Лр╕ор╕▓р╕гр╣М (╪е╪╕┘З╪з╪▒) тАУ р╕нр╣Ир╕▓р╕Щр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ',
          'description':
          'р╕нр╣Ир╕▓р╕Щр╣Ар╕кр╕╡р╕вр╕З "р╕Щ" р╕лр╕гр╕╖р╕н р╕Хр╕▒р╕Щр╕зр╕╡р╕Щ р╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕нр╕вр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г р╕нр╕┤р╕Лр╕ор╕▓р╕гр╣М 6 р╕Хр╕▒р╕з: ╪б╪М ┘З┘А╪М ╪╣╪М ╪н╪М ╪║╪М ╪о',
          'examples': [
            'ЁЯФ╣ ┘Е┘Р┘Ж┘Т ┘З┘О╪з╪п┘Н тЖТ р╕бр╕┤р╕Щ р╕ор╕▓р╕Фр╕┤р╕Щ',
            'ЁЯФ╣ ┘Б┘О╪│┘О┘В┘О┘Й┘░┘З┘П┘Е┘Т ╪н┘О╪к┘С┘О┘Й┘░ тЖТ р╕Яр╕░р╕кр╕░р╕Бр╕нр╕ор╕╕р╕б р╕лр╕▒р╕Хр╕Хр╕▓'
          ]
        },
        {
          'title': 'р╕нр╕┤р╕Др╕ер╕▓р╕Ъ (╪е┘В┘Д╪з╪и) тАУ р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕кр╕╡р╕вр╕З "р╕Щ" р╣Ар╕Ыр╣Зр╕Щ "р╕б"',
          'description':
          'р╣Ар╕Ыр╕ер╕╡р╣Ир╕вр╕Щр╣Ар╕кр╕╡р╕вр╕З р╕Щр╕╣р╕Щр╕кр╕▓р╕Бр╕┤р╕Щ (┘Ж┘Т) р╣Бр╕ер╕░ р╕Хр╕▒р╕Щр╕зр╕╡р╕Щ р╣Ар╕Ыр╣Зр╕Щр╣Ар╕кр╕╡р╕вр╕З р╕бр╕╡р╕б (┘Е) р╣Ар╕бр╕╖р╣Ир╕нр╕нр╕вр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г ╪и',
          'examples': [
            'ЁЯФ╣ ┘Е┘Р┘Ж┘Т ╪и┘О╪╣┘Т╪п┘Р тЖТ р╕бр╕┤р╕б р╕Ър╕░р╕нр╣Мр╕Фр╕┤',
            'ЁЯФ╣ ╪│┘О┘Е┘Р┘К╪╣┘М ╪и┘О╪╡┘Р┘К╪▒┘М тЖТ р╕кр╕░р╕бр╕╡р╕нр╕╕р╕б р╕Ър╕░р╕Лр╕╡р╕гр╕╕р╕Щ'
          ]
        },
        {
          'title': 'р╕нр╕┤р╕Фр╕Бр╕нр╕б тАУ р╕Бр╕ер╕╖р╕Щр╣Ар╕кр╕╡р╕вр╕З',
          'children': [
            {
              'title': 'р╕нр╕┤р╕Фр╕Бр╕нр╕бр╕бр╕╡р╕Жр╕╕р╕Щр╕Щр╕░р╕ор╣М',
              'description': 'р╕нр╕нр╕Бр╣Ар╕кр╕╡р╕вр╕З р╕Щ р╕б р╕з р╕в р╕Юр╕гр╣Йр╕нр╕бр╕Жр╕╕р╕Щр╕Щр╕░р╕ор╣М',
              'examples': ['тЬЕ р╕бр╕▒р╕Щ р╕вр╕░р╕Бр╕╣р╕е', 'тЬЕ р╣Ар╕вр╕▓р╕бр╕░р╕нр╕┤р╕Лр╕┤р╕Щ р╕зр╕╕р╕Нр╕╣р╕ор╕╕р╕Щ']
            },
            {
              'title': 'р╕нр╕┤р╕Фр╕Бр╕нр╕бр╣Др╕бр╣Ир╕бр╕╡р╕Жр╕╕р╕Щр╕Щр╕░р╕ор╣М',
              'description': 'р╕нр╕нр╕Бр╣Ар╕кр╕╡р╕вр╕З р╕е р╣Бр╕ер╕░ р╕г р╣Вр╕Фр╕вр╣Др╕бр╣Ир╕бр╕╡р╕Жр╕╕р╕Щр╕Щр╕░р╕ор╣М',
              'examples': ['тЬЕ р╕бр╕┤р╕е р╕ер╕░р╕Фр╕╕р╕Щр╕ор╕╕', 'тЬЕ р╕Жр╕░р╕Яр╕╣р╕гр╕╕р╕Щ р╕гр╕нр╕ор╕╡р╕бр╕╕р╕Щ']
            }
          ]
        },
        {
          'title': 'р╕нр╕┤р╕Жр╕Яр╕▓р╕нр╣М (╪е╪о┘Б╪з╪б) тАУ р╕Лр╣Ир╕нр╕Щр╣Ар╕кр╕╡р╕вр╕З',
          'description':
          'р╕Лр╣Ир╕нр╕Щр╣Ар╕кр╕╡р╕вр╕З "р╕Щ" р╣Бр╕ер╕░ р╕Хр╕▒р╕Щр╕зр╕╡р╕Щ р╣Вр╕Фр╕вр╕нр╕нр╕Бр╣Ар╕кр╕╡р╕вр╕Зр╕гр╕░р╕лр╕зр╣Ир╕▓р╕З р╕нр╕┤р╕Лр╕ор╕▓р╕гр╣М р╣Бр╕ер╕░ р╕нр╕┤р╕Фр╕Бр╕нр╕б р╣Ар╕бр╕╖р╣Ир╕нр╕нр╕вр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г 15 р╕Хр╕▒р╕з',
          'examples': [
            'ЁЯФ╣ ┘Е┘Р┘Ж┘Т ╪┤┘О╪▒┘С┘Р тЖТ р╕бр╕┤р╣Йр╕Щ р╕Кр╕▒р╕гр╕гр╕┤',
            'ЁЯФ╣ ┘И┘О┘Д┘О┘Г┘Р┘Ж ┘Г┘О╪░┘С┘О╪и┘П┘И╪з тЖТ р╕зр╕░р╕ер╕▓р╕Бр╕┤р╣Йр╕Щ р╕Бр╕▒р╕Лр╕Лр╕░р╕Ър╕╣'
          ]
        }
      ]
    },
    {
      'title': 'р╕Бр╕Ор╕Вр╕нр╕З р╕бр╕╡р╕бр╕кр╕▓р╕Бр╕┤р╕Щ (╪з╪н┘Г╪з┘Е ╪з┘Д┘Е┘К┘Е ╪з┘Д╪│╪з┘Г┘Ж╪й)',
      'children': [
        {
          'title': 'р╕нр╕┤р╕Лр╕ор╕▓р╕гр╣М р╕Кр╕▒р╕Яр╕▓р╕зр╕╡р╕вр╣М (╪е╪╕┘З╪з╪▒ ╪┤┘Б┘И┘К) тАУ р╕нр╣Ир╕▓р╕Щр╕Кр╕▒р╕Фр╣Ар╕Ир╕Щ',
          'description':
          'р╕нр╣Ир╕▓р╕Щ р╕б р╕Кр╕▒р╕Фр╣Ар╕Ир╕Щр╣Ар╕бр╕╖р╣Ир╕нр╕нр╕вр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕гр╕Чр╕╡р╣Ир╣Др╕бр╣Ир╣Гр╕Кр╣И ╪и р╕лр╕гр╕╖р╕н ┘Е',
          'examples': ['ЁЯФ╣ ┘И┘О┘З┘П┘Е┘Т ┘Б┘Р┘К┘З┘О╪з тЖТ р╕зр╕░р╕ор╕╕р╕б р╕Яр╕╡р╕ор╕▓']
        },
        {
          'title': 'р╕нр╕┤р╕Фр╕Бр╕нр╕б р╕Кр╕▒р╕Яр╕▓р╕зр╕╡р╕вр╣М (╪е╪п╪║╪з┘Е ╪┤┘Б┘И┘К) тАУ р╕Бр╕ер╕╖р╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕бр╕╡р╕б',
          'description': 'р╕Бр╕ер╕╖р╕Щр╣Ар╕кр╕╡р╕вр╕З р╕б┘Т р╕Бр╕▒р╕Ър╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г р╕б',
          'examples': ['ЁЯФ╣ ┘Д┘О┘Г┘П┘Е┘Т ┘Е┘О╪з тЖТ р╕ер╕░р╕Бр╕╕р╕б р╕бр╕▓']
        },
        {
          'title': 'р╕нр╕┤р╕Жр╕Яр╕▓р╕нр╣М р╕Кр╕▒р╕Яр╕▓р╕зр╕╡р╕вр╣М (╪е╪о┘Б╪з╪б ╪┤┘Б┘И┘К) тАУ р╕Лр╣Ир╕нр╕Щр╣Ар╕кр╕╡р╕вр╕Зр╕бр╕╡р╕б',
          'description': 'р╕Лр╣Ир╕нр╕Щр╣Ар╕кр╕╡р╕вр╕З р╕б р╣Ар╕бр╕╖р╣Ир╕нр╕нр╕вр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕Хр╕▒р╕зр╕нр╕▒р╕Бр╕йр╕г ╪и',
          'examples': ['ЁЯФ╣ ╪к┘О╪▒┘Т┘Е┘Р┘К┘З┘Р┘Е┘Т ╪и┘Р╪н┘Р╪м┘О╪з╪▒┘О╪й┘Н тЖТ р╕Хр╕▒р╕гр╕бр╕╡р╕ор╕┤р╕б р╕Ър╕┤р╕ор╕┤р╕Ир╕▓р╕гр╕░р╕ор╣М']
        }
      ]
    },
    {
      'title': 'р╕Бр╕Ор╕Вр╕нр╕З р╕бр╕▒р╕Фр╕Фр╕║ (╪з┘Д┘Е╪п┘С тАУ р╕Бр╕▓р╕гр╕вр╕╖р╕Фр╣Ар╕кр╕╡р╕вр╕З)',
      'children': [
        {
          'title': 'р╕бр╕▒р╕Фр╕Фр╕║р╕Шр╕гр╕гр╕бр╕Фр╕▓ (╪з┘Д┘Е╪п ╪з┘Д╪╖╪и┘К╪╣┘К) тАУ р╕вр╕╖р╕Ф 2 р╕ор╕░р╕гр╕нр╕Бр╕░р╕ор╣М',
          'examples': ['ЁЯФ╣ ┘В┘О╪з┘Д┘О тЖТ р╕Бр╕▓р╕ер╕▓', 'ЁЯФ╣ ┘К┘О┘В┘П┘И┘Д┘П тЖТ р╕вр╕░р╕Бр╕╣р╕ер╕╣']
        },
        {
          'title':
          'р╕бр╕▒р╕Фр╕Фр╕║р╕зр╕▓р╕Нр╕┤р╕Ъ р╕бр╕╕р╕Хр╕Хр╕░р╕Лр╕┤р╕е (╪з┘Д┘Е╪п ╪з┘Д┘И╪з╪м╪и ╪з┘Д┘Е╪к╪╡┘Д) тАУ р╕вр╕╖р╕Ф 4-5 р╕ор╕░р╕гр╕нр╕Бр╕░р╕ор╣М',
          'examples': ['ЁЯФ╣ р╕Ир╣Кр╕▓р╕нр╕▓ тЖТ р╕Ир╣Кр╕▓р╕нр╕▓', 'ЁЯФ╣ р╕Лр╕╡р╣Кр╕нр╕▒р╕Х тЖТ р╕Лр╕╡р╣Кр╕нр╕▒р╕Х']
        },
        {
          'title':
          'р╕бр╕▒р╕Фр╕Фр╕║р╕Нр╕▓р╕нр╕┤р╕Л р╕бр╕╕р╕Щр╕Яр╕░р╕Лр╕┤р╕е (╪з┘Д┘Е╪п ╪з┘Д╪м╪з╪ж╪▓ ╪з┘Д┘Е┘Ж┘Б╪╡┘Д) тАУ р╕вр╕╖р╕Ф 4-5 р╕ор╕░р╕гр╕нр╕Бр╕░р╕ор╣М',
          'examples': [
            'ЁЯФ╣ р╕Яр╕╡ р╕нр╕▒р╕Щр╕Яр╕╕р╕Лр╕┤р╕Бр╕╕р╕б тЖТ р╕Яр╕╡ р╕нр╕▒р╕Щр╕Яр╕╕р╕Лр╕┤р╕Бр╕╕р╕б',
            'ЁЯФ╣ р╕нр╕┤р╕Щр╕Щр╕▓ р╕нр╕▒р╕Щр╕Лр╕▒р╕ер╕Щр╕▓р╕ор╕╕ тЖТ р╕нр╕┤р╕Щр╕Щр╕▓ р╕нр╕▒р╕Щр╕Лр╕▒р╕ер╕Щр╕▓р╕ор╕╕'
          ]
        },
        {
          'title': 'р╕бр╕▒р╕Фр╕Фр╕║р╕ер╕▓р╕Лр╕┤р╕б (╪з┘Д┘Е╪п ╪з┘Д┘Д╪з╪▓┘Е) тАУ р╕вр╕╖р╕Ф 6 р╕ор╕░р╕гр╕нр╕Бр╕░р╕ор╣М',
          'examples': [
            'ЁЯФ╣ р╕зр╕░р╕ер╣Кр╕н р╕Фр╕Фр╣Кр╕нр╕ер╕ер╕╡р╕Щ тЖТ р╕зр╕░р╕ер╣Кр╕н р╕Фр╕Фр╣Кр╕нр╕ер╕ер╕╡р╕Щ',
            'ЁЯФ╣ р╕нр╣Кр╕▓р╕ер╕ер╣Кр╕▓р╕нр╕▓р╕Щ тЖТ р╕нр╣Кр╕▓р╕ер╕ер╣Кр╕▓р╕нр╕▓р╕Щ'
          ]
        }
      ]
    },
    {
      'title': 'р╕Бр╕Ор╕нр╕╖р╣Ир╕Щ р╣Ж р╕Чр╕╡р╣Ир╕кр╕│р╕Др╕▒р╕Н',
      'children': [
        {
          'title': 'р╕Бр╕▒р╕Щр╕Бр╕░р╕ер╕░р╕ор╣М (┘В┘Д┘В┘Д╪й) тАУ р╕Бр╕гр╕░р╕Чр╕Ър╣Ар╕кр╕╡р╕вр╕З',
          'description': 'р╣Ар╕бр╕╖р╣Ир╕нр╣Ар╕Ир╕н ┘В╪М ╪╖╪М ╪и╪М ╪м╪М ╪п р╕Чр╕╡р╣Ир╕бр╕╡р╕кр╕Бр╕╕р╕Щ р╣Гр╕лр╣Йр╕нр╕нр╕Бр╣Ар╕кр╕╡р╕вр╕Зр╕Бр╕гр╕░р╕Чр╕Ъ',
          'examples': ['ЁЯФ╣ р╕зр╕░р╕Хр╕▒р╕Ъ тЖТ р╕зр╕░р╕Хр╕▒р╕Ъ', 'ЁЯФ╣ р╕нр╕░р╕ор╕▒р╕Ф тЖТ р╕нр╕░р╕ор╕▒р╕Ф']
        }
      ]
    }
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: Padding(
          padding: const EdgeInsets.only(top: 23),
          child: Row(
            children: [
              GestureDetector(
                onTap: () {
                  Navigator.pop(context);
                },
                child: Icon(
                  MdiIcons.arrowLeft,
                  color: Colors.white,
                  size: 25,
                ),
              ),
              Expanded(
                child: Text(
                  'р╕Хр╕▒р╕Ир╕Нр╕зр╕╡р╕Ф',
                  style: TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w600,
                    fontFamily: 'Google-Font',
                    fontSize: 24,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
        backgroundColor: Color(0xFF006400),
        toolbarHeight: 80,
      ),
      body: Container(
        width: double.infinity,
        height: MediaQuery.of(context).size.height,
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            colors: [Color(0xFF006400), Color(0xFF228B22)],
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
          ),
        ),
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 20),
          child: ListView(
            children: rules.map((section) {
              return ExpansionTile(
                title: Text(
                  section['title'] ?? '',
                  style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.white),
                ),
                trailing: Icon(MdiIcons.chevronRight, color: Colors.green),
                children: (section['children'] as List).map<Widget>((rule) {
                  return rule.containsKey('children')
                      ? ExpansionTile(
                    title: Text(
                      rule['title'] ?? '',
                      style: TextStyle(
                          fontSize: 18, fontWeight: FontWeight.bold,
                      color: Colors.white),
                    ),
                    trailing: Icon(MdiIcons.chevronRight, color: Colors.green),
                    children: (rule['children'] as List)
                        .map<Widget>((subRule) {
                      return _buildCard(subRule);
                    }).toList(),
                  )
                      : _buildCard(rule);
                }).toList(),
              );
            }).toList(),
          ),
        ),
      ),
    );
  }

  Widget _buildCard(Map<String, dynamic> rule) {
    return Container(
      width: double.infinity,
      child: Card(
        elevation: 4,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
        child: Padding(
          padding: const EdgeInsets.all(12.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              Row(
                children: [
                  Icon(MdiIcons.alphaACircle, color: Colors.blue),
                  SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      rule['title'] ?? '',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                  ),
                ],
              ),
              if (rule['description'] != null) ...[
                SizedBox(height: 8),
                Text(rule['description'], style: TextStyle(fontSize: 16)),
              ],
              if (rule['examples'] != null) ...[
                SizedBox(height: 8),
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: rule['examples'].map<Widget>((example) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 2.0),
                      child: Text(
                        '- $example',
                        style: TextStyle(fontSize: 16, color: Colors.blue.shade700),
                      ),
                    );
                  }).toList(),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}